#!/usr/bin/env bash

set -euo pipefail

mdprint() {
    cmd=$*
    echo '```bash'
    echo '$' ${cmd}
    eval ${cmd}
    echo '```'
}

tmpdir=$(mktemp -d)
pushd ${tmpdir}

# delete temporary directory on script exit
trap "rm -fr ${tmpdir}" 0

# Initialise repository
mdprint git init

git config --local user.name "Achilleas Koutsou"
git config --local user.email "ak@example.com"


# No objects here yet
mdprint tree -F .git/objects

# Add a README and commit
mdprint 'echo "# Understanding Git: Presentation slides repository" > README.md'
mdprint git add README.md
mdprint 'git commit -m "Initial commit: Add README"'

# Check the object store again
mdprint tree -F .git/objects

filepaths1=$(find .git/objects -type f)

# git cat-file on each object
for path in ${filepaths1}; do
    prefix=${path:13:2}
    rest=${path:16}
    full=${prefix}${rest}
    mdprint git cat-file -t ${full}
    mdprint git cat-file -p ${full}
done

# These objects are compressed so we can't read them directly
mdprint git rev-parse HEAD

mdprint git cat-file -t HEAD
mdprint git cat-file -p HEAD

# Let's make one more commit so we can see the parent
mdprint 'echo -e "# Understanding Git\n\n> Achilleas Koutsou\n\n2018-11-14" > slides.md'
mdprint git add slides.md
mdprint 'git commit -m "Add first presentation slide"'

# Check the object store again
mdprint tree -F .git/objects

mdprint find .git/objects -type f

filepaths2=$(find .git/objects -type f)

# git cat-file on each *new* object
for path in ${filepaths2}; do
    if echo ${filepaths1} | grep ${path} &> /dev/null; then
        continue
    fi
    prefix=${path:13:2}
    rest=${path:16}
    full=${prefix}${rest}
    mdprint git cat-file -t ${full}
    mdprint git cat-file -p ${full}
    if git cat-file -p ${full} | grep "Understanding Git" &> /dev/null; then
        slidesfirstver=${full}
    fi
done

echo "--------------------------"
# Add a new slide
mdprint 'echo -e "\n\n# Part 1\n## Porcelain and Plumbing" >> slides.md'
mdprint git add slides.md
mdprint 'git commit -m "Add second presentation slide"'

# Check the object store again
mdprint tree -F .git/objects
mdprint find .git/objects -type f

filepaths3=$(find .git/objects -type f)

# git cat-file on each *new* object
for path in ${filepaths3}; do
    if echo ${filepaths2} | grep ${path} &> /dev/null; then
        continue
    fi
    prefix=${path:13:2}
    rest=${path:16}
    full=${prefix}${rest}
    mdprint git cat-file -t ${full}
    mdprint git cat-file -p ${full}
done

mdprint git cat-file -p ${slidesfirstver}

mdprint git cat-file -t HEAD
mdprint git cat-file -t master
mdprint git cat-file -p master

mdprint git cat-file -t master~1
mdprint git cat-file -t master~1:
mdprint git cat-file -p master~1:slides.md

mdprint git cat-file -p master~1:README.md
mdprint git cat-file -p master:README.md

mdprint git rev-parse HEAD
mdprint git rev-parse master

mdprint git cat-file -p HEAD
mdprint git rev-parse HEAD~1

mdprint git cat-file -p master~1:
mdprint git rev-parse master~1:README.md

mdprint git branch demo-code
mdprint git rev-parse master demo-code HEAD

mdprint git checkout demo-code

mdprint 'echo "#!/usr/bin/env bash" > demoscript'
mdprint 'chmod +x demoscript'
mdprint 'git add demoscript'
mdprint 'git commit -m "Add demoscript"'

mdprint git rev-parse master
mdprint git rev-parse demo-code
mdprint git rev-parse HEAD

mdprint git checkout master
mdprint git rev-parse master
mdprint git rev-parse demo-code
mdprint git rev-parse HEAD

mdprint ls

mdprint 'echo -e "\n\n# Part 2\n## What is Git?" >> slides.md'
mdprint git add slides.md
mdprint 'git commit -m "Add third presentation slide"'

mdprint git rev-parse master~1 demo-code~1




exit

# ---------------

mdprint git log --graph master demo-code

mdprint 'git log --graph --pretty=format:"Commit: %H%n    Message: %s%n    Parent: %P%n    Tree: %T%n%n" master demo-code'

git log --reverse --pretty=format:"Commit: %H%n    Message: %s%n    Parent: %P%n    Tree: %T%n%n"
